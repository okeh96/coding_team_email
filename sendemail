#!/usr/bin/python

from __future__ import print_function
import httplib2
import os
import sys

from email.mime.text import MIMEText
from apiclient import discovery
from oauth2client import client
from oauth2client import tools
from oauth2client.file import Storage
from urllib2 import HTTPError
import base64

# If modifying these scopes, delete your previously saved credentials
# at ~/.credentials/gmail-python-quickstart.json
SCOPES = 'https://www.googleapis.com/auth/gmail.compose'
CLIENT_SECRET_FILE = 'client_secret.json'
APPLICATION_NAME = 'Coding Team Email Sender'


def get_credentials():
    """Gets valid user credentials from storage.

    If nothing has been stored, or if the stored credentials are invalid,
    the OAuth2 flow is completed to obtain the new credentials.

    Returns:
        Credentials, the obtained credential.
    """
    home_dir = os.path.expanduser('~')
    credential_dir = os.path.join(home_dir, '.credentials')
    if not os.path.exists(credential_dir):
        os.makedirs(credential_dir)
    credential_path = os.path.join(credential_dir,
                                   'gmail-python-quickstart.json')

    store = Storage(credential_path)
    credentials = store.get()
    if not credentials or credentials.invalid:
        flow = client.flow_from_clientsecrets(CLIENT_SECRET_FILE, SCOPES)
        flow.user_agent = APPLICATION_NAME
        if flags:
            credentials = tools.run_flow(flow, store, flags)
        else: # Needed only for compatibility with Python 2.6
            credentials = tools.run(flow, store)
        print('Storing credentials to ' + credential_path)
    return credentials

def create_message(sender, to, subject, cc, message_text):
  """Create a message for an email.

  Args:
    sender: Email address of the sender.
    to: Email address of the receiver.
    subject: The subject of the email message.
    message_text: The text of the email message.

  Returns:
    An object containing a base64url encoded email object.
  """

  email = ""
  
  for c in message_text:
      email += c
  
  message = MIMEText(email)
  message['to'] = to
  message['cc'] = cc
  message['from'] = sender
  message['subject'] = subject
  return {'raw': base64.urlsafe_b64encode(message.as_string())}

def send_message(service, user_id, message):
  """Send an email message.

  Args:
    service: Authorized Gmail API service instance.
    user_id: User's email address. The special value "me"
    can be used to indicate the authenticated user.
    message: Message to be sent.

  Returns:
    Sent Message.
  """
  try:
      message = (service.users().messages().send(userId=user_id, body=message).execute())
      print("Message Id: %s" % message['id'])
      return message
  except:
      print("An error occurred.")

def main():
    
    if (len(sys.argv) > 2):
        print("Error: Too many arguments. Include only sender email address.")
        exit(1)
    elif (len(sys.argv) == 1):
        print("Error: No arguments given. Include only sender email address.")
        exit(1)
    
    email_text = open('club_email.txt', 'r')
    recipients = open('recipient_list.txt', 'r')
    tail = "@hamilton.edu"
    
    credentials = get_credentials()
    http = credentials.authorize(httplib2.Http())
    service = discovery.build('gmail', 'v1', http=http)
        
    sender = str(sys.argv[1])
    to = sender
    cc = []

    for j in recipients:
        name = j.strip() + tail
        cc.append(name)
    
    subject = "~~CODING TEAM~~ Meeting Saturday"

    for i in cc:
        email_message = create_message(sender, to, subject, i,email_text)
        send_message(service, 'me', email_message)

if __name__ == '__main__':
    main()
